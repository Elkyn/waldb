name: Prebuild Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  prebuild:
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            arch: x64
            rust-target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: arm64
            rust-target: aarch64-unknown-linux-gnu
            use-cross: true
          
          # macOS
          - os: macos-latest
            arch: x64
            rust-target: x86_64-apple-darwin
          - os: macos-latest
            arch: arm64
            rust-target: aarch64-apple-darwin
          
          # Windows
          - os: windows-latest
            arch: x64
            rust-target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: arm64
            rust-target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}
          
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.use-cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          
      - name: Install dependencies
        working-directory: ./bindings/node
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
        
      - name: Build native module (standard)
        if: '!matrix.use-cross'
        working-directory: ./bindings/node
        run: |
          npm run build-release
        env:
          CARGO_BUILD_TARGET: ${{ matrix.rust-target }}
          
      - name: Build native module (cross-compilation)
        if: matrix.use-cross
        working-directory: ./bindings/node
        run: |
          cross build --release --target ${{ matrix.rust-target }}
          cp ../../target/${{ matrix.rust-target }}/release/libwaldb_node.so index.node || \
          cp ../../target/${{ matrix.rust-target }}/release/libwaldb_node.dylib index.node || \
          cp ../../target/${{ matrix.rust-target }}/release/waldb_node.dll index.node
          
      - name: Prebuild
        working-directory: ./bindings/node
        run: npx prebuild --runtime napi --target 6 --arch ${{ matrix.arch }}
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ matrix.os }}-${{ matrix.arch }}
          path: ./bindings/node/prebuilds/**/*.tar.gz
          
  release:
    needs: prebuild
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./bindings/node/prebuilds
          pattern: prebuild-*
          merge-multiple: true
          
      - name: List prebuilds
        run: ls -la ./bindings/node/prebuilds/
        
      - name: Upload to GitHub Release
        working-directory: ./bindings/node
        run: npx prebuild --upload-all
        env:
          PREBUILD_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}