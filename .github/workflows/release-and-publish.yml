name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          # Linux x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            
          # macOS x64 (runs on ARM64 but can build for x64)
          - os: macos-latest
            target: x86_64-apple-darwin
            
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Build native module
        working-directory: ./bindings/node
        run: |
          npm install --ignore-scripts
          npm run build-release
        env:
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          
      - name: Find and rename binary
        shell: bash
        working-directory: ./bindings/node
        run: |
          # Find the built library
          if [ -f "index.node" ]; then
            echo "Found index.node in current directory"
          elif [ -f "../../target/${{ matrix.target }}/release/libwaldb_node.so" ]; then
            cp "../../target/${{ matrix.target }}/release/libwaldb_node.so" index.node
          elif [ -f "../../target/${{ matrix.target }}/release/libwaldb_node.dylib" ]; then
            cp "../../target/${{ matrix.target }}/release/libwaldb_node.dylib" index.node
          elif [ -f "../../target/${{ matrix.target }}/release/waldb_node.dll" ]; then
            cp "../../target/${{ matrix.target }}/release/waldb_node.dll" index.node
          elif [ -f "../../target/release/libwaldb_node.so" ]; then
            cp "../../target/release/libwaldb_node.so" index.node
          elif [ -f "../../target/release/libwaldb_node.dylib" ]; then
            cp "../../target/release/libwaldb_node.dylib" index.node
          elif [ -f "../../target/release/waldb_node.dll" ]; then
            cp "../../target/release/waldb_node.dll" index.node
          else
            echo "Could not find built library"
            find ../../target -name "*.so" -o -name "*.dylib" -o -name "*.dll" 2>/dev/null || true
            exit 1
          fi
          
      - name: Package binary
        shell: bash
        working-directory: ./bindings/node
        run: |
          tar -czf waldb-${{ matrix.target }}.tar.gz index.node
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: ./bindings/node/waldb-${{ matrix.target }}.tar.gz
          
  release:
    needs: build-binaries
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries
          pattern: binary-*
          merge-multiple: true
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./binaries/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  publish-npm:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies
        working-directory: ./bindings/node
        run: npm install --ignore-scripts
        
      - name: Build
        working-directory: ./bindings/node
        run: npm run build-release
        
      - name: Run tests
        working-directory: ./bindings/node
        run: npm test
        
      - name: Publish to npm
        working-directory: ./bindings/node
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}