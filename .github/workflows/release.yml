name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

jobs:
  prebuild-binaries:
    strategy:
      matrix:
        include:
          # Linux x64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            arch: x64
            
          # Linux ARM64 (cross-compile)
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            arch: arm64
            use-cross: true
            
          # macOS x64
          - os: macos-12
            target: x86_64-apple-darwin
            arch: x64
            
          # macOS ARM64
          - os: macos-12
            target: aarch64-apple-darwin
            arch: arm64
            
          # Windows x64
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            arch: x64
            
          # Windows ARM64
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            arch: arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross (Linux ARM64)
        if: matrix.use-cross
        run: cargo install cross --git https://github.com/cross-rs/cross
        
      - name: Install node dependencies
        working-directory: ./bindings/node
        run: npm ci
        
      - name: Build with Cargo (native)
        if: '!matrix.use-cross'
        working-directory: ./bindings/node
        run: |
          export CARGO_BUILD_TARGET=${{ matrix.target }}
          npm run build-release
          
      - name: Build with Cross (ARM64)
        if: matrix.use-cross
        run: |
          cd bindings/node
          cross build --release --target ${{ matrix.target }}
          cp ../../target/${{ matrix.target }}/release/libwaldb_node.so index.node 2>/dev/null || \
          cp ../../target/${{ matrix.target }}/release/libwaldb_node.dylib index.node 2>/dev/null || \
          cp ../../target/${{ matrix.target }}/release/waldb_node.dll index.node 2>/dev/null || true
          
      - name: Package prebuild
        working-directory: ./bindings/node
        run: |
          npx prebuild --runtime napi --target 6 --arch ${{ matrix.arch }} --strip
          
      - name: Upload prebuild artifact
        uses: actions/upload-artifact@v4
        with:
          name: prebuild-${{ matrix.os }}-${{ matrix.arch }}
          path: ./bindings/node/prebuilds/**/*.tar.gz
          
  create-release:
    needs: prebuild-binaries
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: WalDB v${{ steps.get_version.outputs.version }}
          body: |
            ## WalDB v${{ steps.get_version.outputs.version }}
            
            High-performance write-ahead log database with tree semantics.
            
            ### Features
            - Tree-structured key-value store
            - Write-ahead logging with group commit
            - LSM-tree storage with automatic compaction
            - Vector and text search capabilities
            - Multi-architecture support
            
            ### Installation
            
            #### Node.js
            ```bash
            npm install waldb
            ```
            
            #### Rust
            ```toml
            [dependencies]
            waldb = "${{ steps.get_version.outputs.version }}"
            ```
            
            ### Prebuilt binaries
            Prebuilt Node.js binaries are available for:
            - Linux (x64, arm64)
            - macOS (x64, arm64/Apple Silicon)
            - Windows (x64, arm64)
          draft: false
          prerelease: false
          
  upload-prebuilds:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./prebuilds
          pattern: prebuild-*
          
      - name: List artifacts
        run: find ./prebuilds -name "*.tar.gz" -type f
        
      - name: Upload to Release
        run: |
          for file in $(find ./prebuilds -name "*.tar.gz" -type f); do
            filename=$(basename "$file")
            echo "Uploading $filename"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/gzip" \
              --data-binary "@$file" \
              "${{ needs.create-release.outputs.upload_url }}?name=$filename"
          done
          
  publish-npm:
    needs: [create-release, upload-prebuilds]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Update package version
        working-directory: ./bindings/node
        run: |
          npm version ${{ needs.create-release.outputs.version }} --no-git-tag-version
          
      - name: Install dependencies
        working-directory: ./bindings/node
        run: npm ci
        
      - name: Build
        working-directory: ./bindings/node
        run: npm run build-release
        
      - name: Test
        working-directory: ./bindings/node
        run: npm test
        
      - name: Publish to npm
        working-directory: ./bindings/node
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}